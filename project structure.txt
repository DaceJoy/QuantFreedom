exchange settings
    fee pct
    mmr pct
    max leverage
    max order size pct
    max order size value
    min order size pct
    min order size value

record keeping settings
    divide records array size by
    gains pct filter
    total trade filter
    upside filter

user settings
    risk reward
    equity
    max equity risk pct
    max equity risk value

size type
    amount                      # 20 dollar position sizes
    percent of account          # i want my position size to be 10% of my account so if i have 100 i want to have a p size of 10
    
    risk amount                 # risk 10 dollars per trade
    risk percent of account     # i want to risk 1% of my account every trade

order type
    long
    short
    both

leverage mode
    static
    auto adjust for liq price to be below sl

stop loss settings
    stop loss based on (open high low close)
        based on lookback
        add percent to sl

    stop loss pct below entry

        move stop loss to break even
            when price moves pct away from entry
            
            trailing stop loss
                when price moves pct away from entry
                based on (open high low close)
                add percent to trailing sl

take profit
    pct away from entry
    risk to reward


2 symbols
4 indicator settings
8 order settings

grab W symbol
    grab column N of entries for indicator
        grab order settings X
            cycle through bar by bar to see if there is an entry or exit
                check if our availble balance is less than 5
                    if it is break and go to the next order settings
                
                if entry & (equity < 5 or not max risk) 
                    process (long, short, both) order
                        calc position size (size type)
                            if size type risk 
                                calc sl (based on or pct) then position size
                            if amount
                                calc position size
                            

# object-oriented description


position_holder = [in_position | not_in_position]
record_keeper = [strategy_record | strategy_result | order_record | order_setting_record]
risk_taker

# MAIN ITERATION
iterate over symbols
    iterate over entry_evaluation
        iterate over order settings             # keep in mind that user settings may depend on the indicator
            strategy_record.clear()
            we_are_not_broke and iterate over each bar
                we_are_not_broke = backtesting_min_condition_checker.are_we_broke():

                if entry_evaluation[current_bar]:
                    entry_processor.process_entry(order_record_keeper, risk_taker)             # new entity : entry_processor

                position_holder.check_brackets()        #exit evaluation?
            
            if filter_checker.pass_filter():
                order_setting_record_keeper.process()
                strategy_result.process()

return (strategy_result.get_result(), order_setting_record_keeper.get_result())
        
tp_handler = [risk_reward | pct]
leverage_handler = [fixed | dynamic]
entry_size = [amount | pct account | risk amount | risk pct account]
position_holder = [long, short, both]
# PROCESS ENTRY
    # IN_POSITION 
        if risk_taker.at_max():
            return  # do nothing
        else:
            size = entry_size.calculate()               # new entity : entry_size
            if size > 1 and in_between(exchange.min, exchange.max):
                avg_entry = position_holder.get_avg_entry(size)                 
                position_holder.set_position_size(size)
                # NOT SURE -> create SL if requested

                leverage, cash_borrowed, cash_used, equity = leverage_handler.calculate()              # calculate: also sets liquidation price
                exchange.set_leverage(leverage)             
                tp = tp_handler.calculate()                                     # new entity

             if account.balance - cash_used < 0:
                raise Error

            account.update(available_balance, cash_borrowed, cash_used, equity)
            order_result = self.create_order_result(...)
            record_keeper.fill_strategy_record(order_result)
            record_keeper.fill_order_record(order_result)

    # NOT_IN_POSITION 
        do nothing  


class EntrySize:
    def calculate():
        pass

    class AmountEntrySize(EntrySize):
        def calculate():
            return config.fixed_amount

    class PctAccountEntrySize(EntrySize):
        def calculate():
            return account.available_equity * config.entry_size_pct_account 


    class RiskAmountEntrySize(EntrySize):
        def calculate():
            sl = self.calculate_sl()
            return self.do_math(sl)

    class RiskPctAccountEntrySize(EntrySize):
        def calculate():
            sl = self.calculate_sl()
            return self.calculate_position_size(sl)


# STOP LOSS
class StopLoss()
    def thing()
        pass
    
    class SLBasedOn(StopLoss) 
        def calculate()                 # somehow we hav to know if we are in a long or a short to do the calculation
            return stop_loss_price
    
    class SLPct(StopLoss)
        def calculate()                 # somehow we hav to know if we are in a long or a short to do the calculation
            return stop_loss_price

# TAKE PROFIT
class TakeProfit()
    def thing()
        pass
    
    class TPPct(TakeProfit)
        def calculate()
            return take_profit_price
    
    class TPRiskReward(TakeProfit)
        def calculate()
            return take_profit_price

# CHECK_BRACKETS
    # IN POSITION
    class CheckBrackets 
        def check_sl_hit()
            return true / false

        def check_tp_hit()
            return true / false
        
        def check_move_sl_be() # where do i set this to be true 
            return new sl
        
        def check_trail_sl() # where do i set this to be true 
            return new sl


    # NOT IN POSITION
        do nothing

# POSITION HOLDER
    class PositionHolder()
        def average_entry()
            return average_entry

        def new_position_size()
            return position size
            
    class LongTrades()
        def calc_possible_loss()
            return possible loss

        def calculate_posotion_size()
            return position size

        def increase_position()
            return order_results
        
        def decrease_position()
            return order_results

        def calc_leverage()
            return leverage
        
        def calc liq price()
            return liq price
        
    
process entry

backtester
    average entry()
    new position()
    ....
    long
        stop loss
            SLBasedOnCandleBody
                calc stop loss()
            SLPct
                calc stop loss()
        entry size
            calc entry(1-4)
        
        combine entry
            backtester.average entry
            backtester.new position size
            calc stop loss (1 - 2)
            set leverage (1 - 2)
            set take profit(1 - 2)
    short
        stop loss
            calc stop loss(1 - 2)
        entry size
            calc entry(1 - 4)
        
        combine entry
            backtester.average entry
            backtester.new position size
            calc stop loss (1 - 2)
            set leverage (1 - 2)
            set take profit (1 - 2)

new entry
    stop loss (1,2)
    entry size (1,2,3,4)
combined entry
    average entry
    new position size
    stop loss (1,2)
    set leverage (1,2)
    set take profit(1,2)